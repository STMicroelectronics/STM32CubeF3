/**
  @page PWR_CurrentConsumption PWR Current Consumption example

  @verbatim
  ******************** (C) COPYRIGHT 2016 STMicroelectronics *******************
  * @file    PWR/PWR_CurrentConsumption/readme.txt 
  * @author  MCD Application Team
  * @brief   Description of the PWR Current Consumption example.
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2016 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  @endverbatim

@par Example Description 

How to configure the system to measure the current consumption in different 
low-power modes.

The Low Power modes are:
  - Sleep Mode
  - STOP mode without RTC wake-up 
  - STOP mode with RTC wake-up 
  - STANDBY mode without RTC wake-up 
  - STANDBY mode with RTC wake-up 


To run this example, user has to follow the following steps:
 1. Select the Low power modes to be measured by uncommenting the corresponding
    line inside the stm32f3xx_lp_modes.h file.
    @code
       /*#define SLEEP_MODE       */
       /*#define STOP_MODE        */
       #define STOP_RTC_MODE       
       /*#define STANDBY_MODE     */
       /*#define STANDBY_RTC_MODE */
    @endcode       

 2. Use an external amperemeter to measure the IDD current. 

 3. This example can not be used in DEBUG mode,this is due to the fact that the 
    Cortex-M4 core is no longer clocked during low power mode so debugging 
    features are disabled

Here below a detailed description of the example code:

  @verbatim

 1. After reset, the program waits for USER button connected to PE.06 to be 
    pressed - green LED (LED1) is blinking - to enter the selected low power mode.
    
     - When the RTC is not used in the low power mode configuration, press
       * the Key button again to exit sleep or stop mode
       * the Tamper button again to exit stand-by mode        

     - When the RTC is used, the wakeup from low power mode is automatically 
       generated by the RTC (after 20s).
     
  2. After exit from low power mode, the green LED is blinking.
     When exit is triggered by RTC alarm interrupt, the blue LED (LED4) is 
     turned on for about 3 sec. 
     When exit comes from stand-by mode, the orange LED (LED2) is turned on
     for about 3 sec. 
    
  3. The sequence can be repeated from step 1 in following the same steps (pressing
     the Key button to enter the desired low power mode)

  In case of error, the red LED (LED3) is turned on.

   Low power modes description:

    - Sleep Mode
    ============  
            - System Running at PLL (72 MHz)
            - Flash 5 wait state
            - Instruction and Data caches ON
            - Prefetch OFF       
            - Code running from Internal FLASH
            - All peripherals disabled.
            - Wakeup using EXTI Line (Key Button PA.02)
            
    - STOP Mode
    ==========================================
            - RTC Clocked by LSI
            - Regulator in LP mode
            - HSI, HSE OFF and LSI if not used as RTC Clock source
            - No IWDG
            - Wakeup using EXTI Line (Key Button PA.02)

    - STOP Mode with RTC clocked by LSI 
    ==========================================
            - RTC Clocked by LSI
            - Regulator in LP mode
            - HSI, HSE OFF and LSI if not used as RTC Clock source
            - No IWDG
            - Automatic Wakeup using RTC clocked by LSI (after ~20s)

    - STANDBY Mode
    ==============
            - RTC OFF
            - IWDG and LSI OFF
            - Wakeup using WakeUp Pin (Tamper Button PA.00) 
                        
    - STANDBY Mode with RTC clocked by LSI 
    ==========================================
            - RTC Clocked by LSI
            - IWDG OFF and LSI OFF  if not used as RTC Clock source
            - Automatic Wakeup using RTC clocked by LSI (after ~20s)


   @endverbatim

@note Care must be taken when using HAL_Delay(), this function provides accurate delay (in milliseconds)
      based on variable incremented in SysTick ISR. This implies that if HAL_Delay() is called from
      a peripheral ISR process, then the SysTick interrupt must have higher priority (numerically lower)
      than the peripheral interrupt. Otherwise the caller ISR process will be blocked.
      To change the SysTick interrupt priority you have to use HAL_NVIC_SetPriority() function.
      
@note The application need to ensure that the SysTick time base is always set to 1 millisecond
      to have correct HAL operation.

@par Directory contents 

  - PWR/PWR_CurrentConsumption/Inc/stm32f3xx_hal_conf.h     HAL configuration file
  - PWR/PWR_CurrentConsumption/Inc/stm32f3xx_it.h           Interrupt handlers header file
  - PWR/PWR_CurrentConsumption/Inc/main.h                   Header for main.c module 
  - PWR/PWR_CurrentConsumption/Inc/stm32f3xx_lp_modes.h     STM32F3xx Low Power Modes header file
  - PWR/PWR_CurrentConsumption/Src/stm32f3xx_it.c           Interrupt handlers
  - PWR/PWR_CurrentConsumption/Src/main.c                   Main program
  - PWR/PWR_CurrentConsumption/Src/stm32f3xx_hal_msp.c      HAL MSP module
  - PWR/PWR_CurrentConsumption/Src/stm32f3xx_lp_modes.c     STM32F3xx Low Power Modes source file
  - PWR/PWR_CurrentConsumption/Src/system_stm32f3xx.c       STM32F3xx system source file


@par Hardware and Software environment 

  - This example runs on STM32F373xC device.   
  - This example has been tested with STMicroelectronics STM32373-C evaluation
    board and can be easily tailored to any other supported device 
    and development board.
   
  - STM32373-C evaluation board set-up
    - Use LED1 (GREEN) connected to PC.00 pin.
      * LED1 (GREEN) toggles while waiting for the Key button to be pressed to enter the low power mode.
    - Use Key button connected to PA.02 pin, Key button or Tamper button (PA.00) to exit low power mode
      when RTC is not used
    - Connect an amperemeter to JP15 to measure IDD current.
      JP16 must be open (disconnect VDDA from all analog power VDD_ANA connected to the
      analog circuit) for MCU IDD measurement.

@par How to use it ? 

In order to make the program work, you must do the following :
 - Open your preferred toolchain 
 - Rebuild all files and load your image into target memory
 - Run the example


 */
